Методы arriveAndAwaitAdvance() и arriveAndDeregister() являются частями класса Phaser в Java,
который представляет синхронизатор с фазами. Phaser позволяет синхронизировать потоки выполнения
на разных фазах и выполнять определенные действия при достижении определенной фазы.

arriveAndAwaitAdvance():
Описание: Этот метод используется для сигнализации о достижении фазы и блокировки вызывающего
потока выполнения до тех пор, пока все другие потоки не достигнут этой же фазы.
Использование: Рассмотрим пример, где у нас есть 3 потока, которые должны выполнить определенную
задачу одновременно. Мы используем Phaser для синхронизации этих потоков.

import java.util.concurrent.Phaser;

public class PhaserExample {
    public static void main(String[] args) {
        Phaser phaser = new Phaser(1); // Инициализация Phaser с 1 участником (главным потоком)

        // Создание и запуск потоков
        for (int i = 0; i < 3; i++) {
            Thread thread = new Thread(new Worker(phaser));
            thread.start();
        }

        // Регистрация дополнительных участников
        phaser.arriveAndDeregister(); // Главный поток регистрирует себя и сразу же отменяет регистрацию

        // Ожидание завершения всех фаз
        phaser.awaitAdvance(phaser.getPhase());

        System.out.println("All workers have finished their tasks.");
    }

    static class Worker implements Runnable {
        private final Phaser phaser;

        Worker(Phaser phaser) {
            this.phaser = phaser;
        }

        @Override
        public void run() {
            // Выполнение задачи

            phaser.arriveAndAwaitAdvance(); // Сигнализация о достижении фазы и ожидание остальных потоков

            // Продолжение выполнения задачи после достижения фазы
        }
    }
}

В этом примере Phaser используется для синхронизации 3 потоков (Worker). Каждый поток выполняет
некоторую задачу и затем вызывает phaser.arriveAndAwaitAdvance(), чтобы сигнализировать о своем
завершении и ожидать завершения остальных потоков. Главный поток, после запуска потоков, вызывает
phaser.arriveAndDeregister() для регистрации себя и сразу же отменяет регистрацию, чтобы не
блокировать остальные потоки. Затем главный поток вызывает phaser.awaitAdvance(phaser.getPhase()),
чтобы ожидать завершения всех фаз (работников).

arriveAndDeregister():
Описание: Этот метод используется для отмены регистрации потока в Phaser. После вызова этого метода
поток больше не учитывается при вызове методов синхронизации Phaser, и его фаза не изменяется.
Использование: Продолжение примера выше, где главный поток регистрирует себя и сразу же отменяет
регистрацию с использованием arriveAndDeregister().

// ...

phaser.arriveAndDeregister(); // Главный поток регистрирует себя и сразу же отменяет регистрацию

// ...

В этом примере после регистрации главного потока с помощью arriveAndDeregister(), фаза главного потока
больше не будет учитываться при синхронизации потоков с помощью Phaser.